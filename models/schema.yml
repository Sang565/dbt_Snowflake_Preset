version: 2

models:
  - name: dim_listings_cleansed # model name
    description: Cleansed table which contains Airbnb listings.
    
    columns:
      - name: listing_id   # col name
        description: Primary key for the listing.
        tests:
          - unique
          - not_null

      - name: host_id
        description: The host's id. References the host table.       
        tests:
          - not_null
          - relationships:
              to: ref('dim_hosts_cleansed')
              field: host_id

      - name: room_type
        description: Type of the apartment / room.
        tests:
          - accepted_values:
              values: ['Entire home/apt',
                        'Private room',
                        'Shared room',
                        'Hotel room']

      - name: minimum_nights 
        description: '{{ doc("dim_listing_cleansed__minimum_nights") }}'
        tests:
          - positive_value   # this Generic test is created by ourself, not a built-in dbt

  #===================================================
  - name: dim_hosts_cleansed # model name
    description: Cleansed table which contains Airbnb hosts.

    columns:
      - name: host_id
        tests:
          - not_null
          - unique
      
      - name: host_name
        tests:
          - not_null
      
      - name: is_superhost
        tests:
          - accepted_values:
              values: ['t', 'f']

  #===== use dbt-expectations (an external package) ==============================================
  - name: dim_listings_w_hosts   
    tests:  #-- test at the model level ---
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
          compare_model: source('airbnb', 'listings')
          # group_by: [col1, col2] # (Optional)
          # compare_group_by: [col1, col2] # (Optional)
          # factor: 1 # (Optional)
          # row_condition: "id is not null" # (Optional)
          # compare_row_condition: "id is not null" # (Optional)

    columns: #-- test at the col level ---  
      - name: price
        tests: # outliers test
          - dbt_expectations.expect_column_quantile_values_to_be_between:
              quantile: .99
              min_value: 50 # (Optional)
              max_value: 500 # (Optional)
              # group_by: [group_id, other_group_id, ...] # (Optional)
              # row_condition: "id is not null" # (Optional)
              # strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)
          - dbt_expectations.expect_column_max_to_be_between:
              #min_value: 1 # (Optional)
              max_value: 5000 # (Optional)
              # group_by: [group_id, other_group_id, ...] # (Optional)
              # row_condition: "id is not null" # (Optional)
              # strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)
              config: #-- for external config out of dbt_expectations or any tests
                severity: warn
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: number

